import { api } from './api';
import { User, UserPermissions } from '@/types'; // Assuming types are in src/types

// Define the expected shape for user creation data (matching backend expectations)
// Exclude fields generated by backend (id, createdAt) but include password
type UserCreationPayload = Omit<User, 'id' | 'createdAt'> & { password?: string };

// --- Define Payload Types --- 
// Payload for creating an admin (name, email, password, optional limit)
// This type definition is no longer accurate for the function input
// type AddAdminPayload = {
//   name: string;
//   email: string;
//   password?: string; // Optional if backend handles default/invite
//   employeeCreationLimit?: number | null;
// }

/**
 * Fetches all users from the backend API.
 * Assumes the backend has an endpoint like GET /api/users.
 * @returns Promise resolving to an array of User objects.
 */
const getAllUsers = async (): Promise<User[]> => {
  try {
    // The actual API response might be nested, adjust if necessary
    const response = await api.get('/users');
    // Assuming the data is directly the array of users
    return response as User[]; 
  } catch (error) {
    console.error('Failed to fetch users from API:', error);
    throw error; 
  }
};

/**
 * Creates a new user via the backend API.
 * @param userData The data for the new user.
 * @returns Promise resolving to the newly created User object.
 */
const createUser = async (userData: UserCreationPayload): Promise<User> => {
  try {
    const newUser = await api.post('/users', userData);
    return newUser as User;
  } catch (error) {
    console.error('Failed to create user via API:', error);
    throw error;
  }
};

/**
 * Updates the permissions for a specific user via the backend API.
 * @param userId The ID of the user to update.
 * @param permissions The new permissions object.
 * @returns Promise resolving to the updated User object.
 */
const updateUserPermissions = async (userId: string, permissions: UserPermissions): Promise<User> => {
  try {
    const updatedUser = await api.put(`/users/${userId}/permissions`, { permissions });
    return updatedUser as User;
  } catch (error) {
    console.error(`Failed to update permissions for user ${userId} via API:`, error);
    throw error;
  }
};

/**
 * Deletes a user via the backend API.
 * @param userId The ID of the user to delete.
 * @returns Promise resolving when the deletion is successful.
 */
const deleteUser = async (userId: string): Promise<void> => {
  try {
    await api.delete(`/users/${userId}`);
  } catch (error) {
    console.error(`Failed to delete user ${userId} via API:`, error);
    throw error;
  }
};

/**
 * Adds a new admin user, potentially including a logo file.
 * @param adminData FormData containing admin details and optional logo file.
 * @returns Promise resolving to the newly created Admin User object.
 */
const addAdmin = async (adminData: FormData): Promise<User> => {
  try {
    // Correct endpoint is /api/admin/create-admin as per backend route setup
    const newAdmin = await api.post('/admin/create-admin', adminData); 
    // api.post with FormData should automatically set Content-Type: multipart/form-data
    return newAdmin as User;
  } catch (error) {
    console.error('Failed to add admin via API:', error);
    throw error;
  }
};

// Add other user-related API calls here as needed
// e.g., getUserById, createUser, updateUser, deleteUser

export const userService = {
  getAllUsers,
  createUser,
  addAdmin,
  updateUserPermissions,
  deleteUser,
  // ... other functions
};
